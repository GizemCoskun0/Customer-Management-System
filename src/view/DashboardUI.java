package view;

import business.CustomerController;
import business.ProductController;
import business.BasketController;
import business.CartController;
import core.Helper;
import entity.Basket;
import entity.Cart;
import entity.Customer;
import entity.Product;
import entity.User;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;


public class DashboardUI extends javax.swing.JFrame {

   private User user;
   private CustomerController cont;
   private ProductController cont_product;
   private BasketController basket_cont;
   private CartController cartController;
   private JPopupMenu popup_customer = new JPopupMenu();
   private JPopupMenu popup_product = new JPopupMenu();
   
  
   
    public DashboardUI(User user) {
        this.user = user;
        this.cont = new CustomerController();
        this.cont_product = new ProductController();
        this.basket_cont = new BasketController();
        this.cartController = new CartController();
        
        if(user==null){
            Helper.showMsg("Error");
            dispose();
        }
        
        initComponents();
        
        this.setTitle("Customer Management System");
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.lbl_welcome.setText("Welcome, "+this.user.getName());
        
        loadCustomerTable(null);
        loadCustomerPopupMenu();
        setComboBox();
        
        
        loadProductTable(null);
        loadProductPopupMenu();
        setStockStatusComboBox();
        
        loadBasketTable();
        setBasketComboBox();
        
        loadCartTable();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnl_top = new javax.swing.JPanel();
        lbl_welcome = new javax.swing.JLabel();
        btn_logout = new javax.swing.JButton();
        tab_pnl = new javax.swing.JTabbedPane();
        pnl_customers = new javax.swing.JPanel();
        pnl_customer = new javax.swing.JPanel();
        lbl_f_customer_name = new javax.swing.JLabel();
        lbl_f_customer_type = new javax.swing.JLabel();
        btn_customer_filter_reset = new javax.swing.JButton();
        btn_customer_new = new javax.swing.JButton();
        btn_customer_filter = new javax.swing.JButton();
        cmb_f_customer_type = new javax.swing.JComboBox<>();
        txt_f_customer_name = new javax.swing.JTextField();
        scrl_pnl_customer = new javax.swing.JScrollPane();
        tbl_customer = new javax.swing.JTable();
        pnl_stocks = new javax.swing.JPanel();
        pnl_filter = new javax.swing.JPanel();
        lbl_product_name = new javax.swing.JLabel();
        lbl_prdoduct_code = new javax.swing.JLabel();
        txt_product_name = new javax.swing.JTextField();
        txt_product_code = new javax.swing.JTextField();
        lbl_stock_status = new javax.swing.JLabel();
        cmb_stock_status = new javax.swing.JComboBox<>();
        btn_search = new javax.swing.JButton();
        btn_clean = new javax.swing.JButton();
        btn_add_new = new javax.swing.JButton();
        scrl_pan_stocks = new javax.swing.JScrollPane();
        tbl_product = new javax.swing.JTable();
        pnl_basket = new javax.swing.JPanel();
        pnl_creat_basket = new javax.swing.JPanel();
        lbl_choose_customer = new javax.swing.JLabel();
        cmb_choose_customer = new javax.swing.JComboBox<>();
        lbl_total_amount = new javax.swing.JLabel();
        lbl_amount = new javax.swing.JLabel();
        lbl_number_of_product = new javax.swing.JLabel();
        lbl_product_number = new javax.swing.JLabel();
        btn_clear_order = new javax.swing.JButton();
        btn_creat_order = new javax.swing.JButton();
        scrpan_basket = new javax.swing.JScrollPane();
        tbl_basket = new javax.swing.JTable();
        pnl_orders = new javax.swing.JPanel();
        scrl_pnl_orders = new javax.swing.JScrollPane();
        tbl_orders = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_welcome.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbl_welcome.setText("WELCOME");

        btn_logout.setText("Logout");
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_topLayout = new javax.swing.GroupLayout(pnl_top);
        pnl_top.setLayout(pnl_topLayout);
        pnl_topLayout.setHorizontalGroup(
            pnl_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_topLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lbl_welcome, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_logout)
                .addContainerGap())
        );
        pnl_topLayout.setVerticalGroup(
            pnl_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_topLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_topLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_welcome)
                    .addComponent(btn_logout))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbl_f_customer_name.setText("Customer Name:");

        lbl_f_customer_type.setText("Type:");

        btn_customer_filter_reset.setText("Clean");
        btn_customer_filter_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customer_filter_resetActionPerformed(evt);
            }
        });

        btn_customer_new.setText("Add New");
        btn_customer_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customer_newActionPerformed(evt);
            }
        });

        btn_customer_filter.setText("Enter");
        btn_customer_filter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_customer_filterActionPerformed(evt);
            }
        });

        cmb_f_customer_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmb_f_customer_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_f_customer_typeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_customerLayout = new javax.swing.GroupLayout(pnl_customer);
        pnl_customer.setLayout(pnl_customerLayout);
        pnl_customerLayout.setHorizontalGroup(
            pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_customerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txt_f_customer_name)
                    .addComponent(lbl_f_customer_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24)
                .addGroup(pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_f_customer_type, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnl_customerLayout.createSequentialGroup()
                        .addComponent(cmb_f_customer_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(btn_customer_filter)
                        .addGap(18, 18, 18)
                        .addComponent(btn_customer_filter_reset)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_customerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_customer_new)
                .addContainerGap())
        );
        pnl_customerLayout.setVerticalGroup(
            pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_customerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_f_customer_name)
                    .addComponent(lbl_f_customer_type))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnl_customerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_f_customer_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_f_customer_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_customer_filter)
                    .addComponent(btn_customer_filter_reset))
                .addGap(18, 18, 18)
                .addComponent(btn_customer_new)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        tbl_customer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Email", "Phone", "Address", "Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrl_pnl_customer.setViewportView(tbl_customer);
        if (tbl_customer.getColumnModel().getColumnCount() > 0) {
            tbl_customer.getColumnModel().getColumn(0).setResizable(false);
            tbl_customer.getColumnModel().getColumn(1).setResizable(false);
            tbl_customer.getColumnModel().getColumn(2).setResizable(false);
            tbl_customer.getColumnModel().getColumn(3).setResizable(false);
            tbl_customer.getColumnModel().getColumn(4).setResizable(false);
            tbl_customer.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout pnl_customersLayout = new javax.swing.GroupLayout(pnl_customers);
        pnl_customers.setLayout(pnl_customersLayout);
        pnl_customersLayout.setHorizontalGroup(
            pnl_customersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_customersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_customersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrl_pnl_customer, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                    .addComponent(pnl_customer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnl_customersLayout.setVerticalGroup(
            pnl_customersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_customersLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(pnl_customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrl_pnl_customer, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pnl.addTab("Customers", pnl_customers);

        lbl_product_name.setText("Product Name:");

        lbl_prdoduct_code.setText("Code:");

        lbl_stock_status.setText("Stock status: ");

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_clean.setText("Clean");
        btn_clean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cleanActionPerformed(evt);
            }
        });

        btn_add_new.setText("Add New");
        btn_add_new.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_newActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_filterLayout = new javax.swing.GroupLayout(pnl_filter);
        pnl_filter.setLayout(pnl_filterLayout);
        pnl_filterLayout.setHorizontalGroup(
            pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_filterLayout.createSequentialGroup()
                .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_filterLayout.createSequentialGroup()
                        .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_product_name)
                            .addComponent(lbl_product_name, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                        .addGap(32, 32, 32)
                        .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_prdoduct_code, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_product_code, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_filterLayout.createSequentialGroup()
                                .addComponent(cmb_stock_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_search)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_clean))
                            .addGroup(pnl_filterLayout.createSequentialGroup()
                                .addComponent(lbl_stock_status, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_filterLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_add_new)))
                .addContainerGap())
        );
        pnl_filterLayout.setVerticalGroup(
            pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_filterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_product_name)
                    .addComponent(lbl_prdoduct_code)
                    .addComponent(lbl_stock_status))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_filterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_product_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_product_code, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_stock_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search)
                    .addComponent(btn_clean))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_add_new)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tbl_product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Id", "Name", "Code", "Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrl_pan_stocks.setViewportView(tbl_product);
        if (tbl_product.getColumnModel().getColumnCount() > 0) {
            tbl_product.getColumnModel().getColumn(0).setResizable(false);
            tbl_product.getColumnModel().getColumn(1).setResizable(false);
            tbl_product.getColumnModel().getColumn(2).setResizable(false);
            tbl_product.getColumnModel().getColumn(3).setResizable(false);
            tbl_product.getColumnModel().getColumn(4).setResizable(false);
        }

        javax.swing.GroupLayout pnl_stocksLayout = new javax.swing.GroupLayout(pnl_stocks);
        pnl_stocks.setLayout(pnl_stocksLayout);
        pnl_stocksLayout.setHorizontalGroup(
            pnl_stocksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_stocksLayout.createSequentialGroup()
                .addGroup(pnl_stocksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrl_pan_stocks, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                    .addGroup(pnl_stocksLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnl_filter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnl_stocksLayout.setVerticalGroup(
            pnl_stocksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_stocksLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrl_pan_stocks, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pnl.addTab("Product", pnl_stocks);

        lbl_choose_customer.setText("Choose Customer:");

        cmb_choose_customer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lbl_total_amount.setText("Total Amount:");

        lbl_amount.setText("0 dolar");

        lbl_number_of_product.setText("Number of Product:");

        lbl_product_number.setText("0");

        btn_clear_order.setText("Clear");
        btn_clear_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clear_orderActionPerformed(evt);
            }
        });

        btn_creat_order.setText("Creat Order");
        btn_creat_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_creat_orderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnl_creat_basketLayout = new javax.swing.GroupLayout(pnl_creat_basket);
        pnl_creat_basket.setLayout(pnl_creat_basketLayout);
        pnl_creat_basketLayout.setHorizontalGroup(
            pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_creat_basketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbl_choose_customer, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(cmb_choose_customer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_total_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_number_of_product, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_product_number, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_creat_order, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_clear_order, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        pnl_creat_basketLayout.setVerticalGroup(
            pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_creat_basketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_choose_customer)
                    .addComponent(lbl_total_amount)
                    .addComponent(lbl_number_of_product))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_creat_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmb_choose_customer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_amount)
                    .addComponent(lbl_product_number))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_creat_basketLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_clear_order)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_creat_order)
                .addContainerGap())
        );

        tbl_basket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Product Name", "Product Code", "Price", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrpan_basket.setViewportView(tbl_basket);
        if (tbl_basket.getColumnModel().getColumnCount() > 0) {
            tbl_basket.getColumnModel().getColumn(0).setResizable(false);
            tbl_basket.getColumnModel().getColumn(1).setResizable(false);
            tbl_basket.getColumnModel().getColumn(2).setResizable(false);
            tbl_basket.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout pnl_basketLayout = new javax.swing.GroupLayout(pnl_basket);
        pnl_basket.setLayout(pnl_basketLayout);
        pnl_basketLayout.setHorizontalGroup(
            pnl_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_basketLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_creat_basket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrpan_basket))
                .addContainerGap())
        );
        pnl_basketLayout.setVerticalGroup(
            pnl_basketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_basketLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_creat_basket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrpan_basket, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pnl.addTab("Creat Order", pnl_basket);

        tbl_orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Customer Name", "Product Name", "Price", "Date", "Note"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrl_pnl_orders.setViewportView(tbl_orders);
        if (tbl_orders.getColumnModel().getColumnCount() > 0) {
            tbl_orders.getColumnModel().getColumn(0).setResizable(false);
            tbl_orders.getColumnModel().getColumn(1).setResizable(false);
            tbl_orders.getColumnModel().getColumn(2).setResizable(false);
            tbl_orders.getColumnModel().getColumn(3).setResizable(false);
            tbl_orders.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout pnl_ordersLayout = new javax.swing.GroupLayout(pnl_orders);
        pnl_orders.setLayout(pnl_ordersLayout);
        pnl_ordersLayout.setHorizontalGroup(
            pnl_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrl_pnl_orders, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
        );
        pnl_ordersLayout.setVerticalGroup(
            pnl_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_ordersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrl_pnl_orders, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab_pnl.addTab("Orders", pnl_orders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tab_pnl)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnl_top, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(tab_pnl))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        this.dispose();
        LoginUI loginUI = new LoginUI();
        loginUI.setVisible(true);
    }//GEN-LAST:event_btn_logoutActionPerformed

    private void btn_customer_filterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customer_filterActionPerformed

    String name = this.txt_f_customer_name.getText().trim();

    Customer.TYPE type = null;
    Object selectedItem = this.cmb_f_customer_type.getSelectedItem();

    if (selectedItem != null && !selectedItem.toString().equals("")) {
        try {
            type = Customer.TYPE.valueOf(selectedItem.toString());
        } catch (IllegalArgumentException e) {
            // Seçilen değer ENUM'da yoksa burada düşer
            Helper.showMsg("Invalid type selected.");
            return;
        }
    }

    ArrayList<Customer> filteredCustomer = this.cont.filter(name, type);
        loadCustomerTable(filteredCustomer);
    }//GEN-LAST:event_btn_customer_filterActionPerformed

    private void btn_customer_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customer_newActionPerformed
        CustomerUI customerUI = new CustomerUI(new Customer());
        customerUI.setVisible(true);
        customerUI.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosed(java.awt.event.WindowEvent e) {
        loadCustomerTable(null);
        setBasketComboBox();
    }
});

        
    }//GEN-LAST:event_btn_customer_newActionPerformed

    private void btn_customer_filter_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_customer_filter_resetActionPerformed
        loadCustomerTable(null);
        this.txt_f_customer_name.setText(null);
        this.cmb_f_customer_type.setSelectedItem(null);
    }//GEN-LAST:event_btn_customer_filter_resetActionPerformed

    private void btn_add_newActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_newActionPerformed
        ProductUI productUI = new ProductUI(new Product());
        productUI.setVisible(true);
        productUI.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosed(java.awt.event.WindowEvent e) {
        loadProductTable(null);
    }
});

    }//GEN-LAST:event_btn_add_newActionPerformed

    private void cmb_f_customer_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_f_customer_typeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_f_customer_typeActionPerformed

    private void btn_cleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cleanActionPerformed
        loadProductTable(null);
        this.txt_product_name.setText(null);
        this.txt_product_code.setText(null);
        this.cmb_stock_status.setSelectedItem(null);
    }//GEN-LAST:event_btn_cleanActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
    String name = txt_product_name.getText().trim();
    String code = txt_product_code.getText().trim();
    String status = (String) cmb_stock_status.getSelectedItem();

    Boolean inStock = null;
    if ("In Stock".equals(status)) {
        inStock = true;
    } else if ("Out of Stock".equals(status)) {
        inStock = false;
    }

    ArrayList<Product> filteredProducts = cont_product.filter(name, code, inStock);
    loadProductTable(filteredProducts);
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_clear_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clear_orderActionPerformed
      if(this.basket_cont.clear()){
          Helper.showMsg("done");
          loadBasketTable();
      }else{
          Helper.showMsg("error");
      }
    }//GEN-LAST:event_btn_clear_orderActionPerformed

    private void btn_creat_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_creat_orderActionPerformed
        Object selectedCustomer = this.cmb_choose_customer.getSelectedItem();
         if(selectedCustomer==null){
             Helper.showMsg("Please, choose a customer");
         }else{
             String selectedString = selectedCustomer.toString();
             String[] parts = selectedString.split(" - ");

    if (parts.length < 2) {
        Helper.showMsg("Selected customer format is incorrect!");
        return;
    }
    

    try {
        int customerId = Integer.parseInt(parts[0].trim());  // ID kısmını al, boşlukları temizle
        Customer customer = this.cont.getById(customerId);
        ArrayList<Basket> baskets = this.basket_cont.findAll();
        if (customer == null) {
            Helper.showMsg("Customer not found!");
            
        }else if(baskets.isEmpty()){
            Helper.showMsg("Please, add a product to the basket.");
        }else{
            CartUI cartUI = new CartUI(customer);
            cartUI.setVisible(true);
            cartUI.addWindowListener(new java.awt.event.WindowAdapter() {
    @Override
    public void windowClosed(java.awt.event.WindowEvent e) {
        loadBasketTable();
        loadProductTable(null);
        loadCartTable();
    }
    });
    }
    }catch (NumberFormatException e) {
        Helper.showMsg("Customer ID format is incorrect!");
    }
}
     
    }//GEN-LAST:event_btn_creat_orderActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_new;
    private javax.swing.JButton btn_clean;
    private javax.swing.JButton btn_clear_order;
    private javax.swing.JButton btn_creat_order;
    private javax.swing.JButton btn_customer_filter;
    private javax.swing.JButton btn_customer_filter_reset;
    private javax.swing.JButton btn_customer_new;
    private javax.swing.JButton btn_logout;
    private javax.swing.JButton btn_search;
    private javax.swing.JComboBox<String> cmb_choose_customer;
    private javax.swing.JComboBox<String> cmb_f_customer_type;
    private javax.swing.JComboBox<String> cmb_stock_status;
    private javax.swing.JLabel lbl_amount;
    private javax.swing.JLabel lbl_choose_customer;
    private javax.swing.JLabel lbl_f_customer_name;
    private javax.swing.JLabel lbl_f_customer_type;
    private javax.swing.JLabel lbl_number_of_product;
    private javax.swing.JLabel lbl_prdoduct_code;
    private javax.swing.JLabel lbl_product_name;
    private javax.swing.JLabel lbl_product_number;
    private javax.swing.JLabel lbl_stock_status;
    private javax.swing.JLabel lbl_total_amount;
    private javax.swing.JLabel lbl_welcome;
    private javax.swing.JPanel pnl_basket;
    private javax.swing.JPanel pnl_creat_basket;
    private javax.swing.JPanel pnl_customer;
    private javax.swing.JPanel pnl_customers;
    private javax.swing.JPanel pnl_filter;
    private javax.swing.JPanel pnl_orders;
    private javax.swing.JPanel pnl_stocks;
    private javax.swing.JPanel pnl_top;
    private javax.swing.JScrollPane scrl_pan_stocks;
    private javax.swing.JScrollPane scrl_pnl_customer;
    private javax.swing.JScrollPane scrl_pnl_orders;
    private javax.swing.JScrollPane scrpan_basket;
    private javax.swing.JTabbedPane tab_pnl;
    private javax.swing.JTable tbl_basket;
    private javax.swing.JTable tbl_customer;
    private javax.swing.JTable tbl_orders;
    private javax.swing.JTable tbl_product;
    private javax.swing.JTextField txt_f_customer_name;
    private javax.swing.JTextField txt_product_code;
    private javax.swing.JTextField txt_product_name;
    // End of variables declaration//GEN-END:variables

    private void loadCustomerTable(ArrayList<Customer> customers) {
     
        if(customers==null){
            customers = this.cont.findAll();
        }
        
        DefaultTableModel model = (DefaultTableModel) tbl_customer.getModel();
        model.setRowCount(0);
        
        for(Customer customer : customers){
            Object[] obj = {
                customer.getId(),
                customer.getName(),
                customer.getEmail(),
                customer.getPhone(),
                customer.getAddress(),
                customer.getType()
            };
            model.addRow(obj);
        }
        this.tbl_customer.setModel(model);
       
        
    }

   private void loadCustomerPopupMenu() {
    JMenuItem updateItem = new JMenuItem("Update");
    updateItem.addActionListener(e -> {
        int selectedRow = tbl_customer.getSelectedRow();
        if (selectedRow != -1) {
            int selectedId = Integer.parseInt(tbl_customer.getValueAt(selectedRow, 0).toString());
            Customer editedCustomer = this.cont.getById(selectedId);
            CustomerUI customerUI = new CustomerUI(editedCustomer);
            customerUI.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                loadCustomerTable(null); // Tablonun yenilenmesini sağlar
                setBasketComboBox();
            }
        });
        } else {
            Helper.showMsg("Lütfen güncellenecek müşteriyi seçin.");
        }
    });

    JMenuItem removeItem = new JMenuItem("Remove");
    removeItem.addActionListener(e -> {
        int selectedRow = tbl_customer.getSelectedRow();
        if (selectedRow != -1) {
            if (Helper.confirm("sure")){
            int selectedId = Integer.parseInt(tbl_customer.getValueAt(selectedRow, 0).toString());
            if(this.cont.delete(selectedId)){
                Helper.showMsg("done");
                loadCustomerTable(null); // Tablonun yenilenmesini sağlar
                setBasketComboBox();
            }
       
        }} else {
            Helper.showMsg("Lütfen silinecek müşteriyi seçin.");
        }
    });

    this.popup_customer.add(updateItem);
    this.popup_customer.add(removeItem);
    this.tbl_customer.setComponentPopupMenu(this.popup_customer);

    tbl_customer.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mousePressed(java.awt.event.MouseEvent e) {
            int row = tbl_customer.rowAtPoint(e.getPoint());
            if (row >= 0 && row < tbl_customer.getRowCount()) {
                tbl_customer.setRowSelectionInterval(row, row);
            } else {
                tbl_customer.clearSelection();
            }
        }
    });
}
   
    private void setComboBox(){
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        for (Customer.TYPE type : Customer.TYPE.values()) {
              model.addElement(type.toString());
           }
          cmb_f_customer_type.setModel(model);
          cmb_f_customer_type.setSelectedItem(null);

    }

    private void loadProductTable(ArrayList<Product> products) {
         if(products==null){
            products = this.cont_product.findAll();}
            
         DefaultTableModel model1 = (DefaultTableModel) tbl_product.getModel();
            model1.setRowCount(0);
            
            for(Product product : products){
            Object[] obj = {
                product.getId(),
                product.getName(),
                product.getCode(),
                product.getPrice(),
                product.getStock()
                
            };
            model1.addRow(obj);
        }
      
        }
  
    private void loadProductPopupMenu() {
 JMenuItem updateItem = new JMenuItem("Update");
    updateItem.addActionListener(e -> {
        int selectedRow = tbl_product.getSelectedRow();
        if (selectedRow != -1) {
            int selectedId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());
            Product editedProduct = this.cont_product.getById(selectedId);
            ProductUI productUI = new ProductUI(editedProduct);
            productUI.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e) {
                loadProductTable(null); // Tablonun yenilenmesini sağlar
                loadBasketTable();
            }
        });
        } else {
            Helper.showMsg("Please, select the product to update.");
        }
    });
    JMenuItem basketItem = new JMenuItem("Add to basket");
    basketItem.addActionListener(e -> {
         int selectedRow = tbl_product.getSelectedRow();
         if (selectedRow != -1) {
            int selectedId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());
            Product basketProduct = this.cont_product.getById(selectedId);
           
            if(basketProduct.getStock()<=0){
                Helper.showMsg("This product is out of stock.");
            }else{
                Basket basket = new Basket(basketProduct.getId());
                
                if(this.basket_cont.save(basket)){
                    Helper.showMsg("done");
                    loadBasketTable();
                }else{
                    Helper.showMsg("error");
                }
            }
            
         }
    });

    JMenuItem removeItem = new JMenuItem("Remove");
    removeItem.addActionListener(e -> {
        int selectedRow = tbl_product.getSelectedRow();
        if (selectedRow != -1) {
            if (Helper.confirm("sure")){
            int selectedId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());
            if(this.cont_product.delete(selectedId)){
                Helper.showMsg("done");
                loadProductTable(null); // Tablonun yenilenmesini sağlar
                loadBasketTable();
            }
       
        }} else {
            Helper.showMsg("Please, select the product to remove.");
        }
    });

    this.popup_product.add(updateItem);
    this.popup_product.add(removeItem);
    this.popup_product.add(basketItem);
    this.tbl_product.setComponentPopupMenu(this.popup_product);

    tbl_product.addMouseListener(new java.awt.event.MouseAdapter() {
        @Override
        public void mousePressed(java.awt.event.MouseEvent e) {
            int row = tbl_product.rowAtPoint(e.getPoint());
            if (row >= 0 && row < tbl_product.getRowCount()) {
                tbl_product.setRowSelectionInterval(row, row);
            } else {
                tbl_product.clearSelection();
            }
        }
    });    }
    
    private void setStockStatusComboBox() {
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
    model.addElement(""); // Boş seçim
    model.addElement("In Stock");
    model.addElement("Out of Stock");
    cmb_stock_status.setModel(model);
    cmb_stock_status.setSelectedItem(null); // Varsayılan olarak boş seçili
}

    private void loadBasketTable() {
       ArrayList<Basket> baskets = this.basket_cont.findAll();
       DefaultTableModel model2 = (DefaultTableModel) tbl_basket.getModel();
            model2.setRowCount(0);
            int totalPrice = 0;
            for(Basket basket : baskets){
            Object[] obj = {
                basket.getId(),
                basket.getProduct().getName(),
                basket.getProduct().getCode(),
                basket.getProduct().getPrice(),
                basket.getProduct().getStock()
                
            };
            
            model2.addRow(obj);
            totalPrice+= basket.getProduct().getPrice();
        }
            this.lbl_amount.setText(String.valueOf(totalPrice));
            this.lbl_product_number.setText(String.valueOf(baskets.size()));
            
            
            
    }

    private void setBasketComboBox() {
        DefaultComboBoxModel<String> model1 = new DefaultComboBoxModel<>();
        ArrayList<Customer> customers = this.cont.findAll();
        this.cmb_choose_customer.removeAllItems();
        for (Customer customer : customers) {
              model1.addElement(customer.getId() + " - " + customer.getName());
           }
          cmb_choose_customer.setModel(model1);
          cmb_choose_customer.setSelectedItem(null);
    }

    private void loadCartTable() {
       ArrayList<Cart> carts = this.cartController.findAll();
        
       DefaultTableModel model3 = (DefaultTableModel) tbl_orders.getModel();
            model3.setRowCount(0);
           
            for(Cart cart : carts){
            Object[] obj = {
                cart.getId(),
                cart.getCustomer().getName(),
                cart.getProduct().getName(),
                cart.getPrice(),
                cart.getDate(),
                cart.getNote()
                
            };
            
            model3.addRow(obj);
           
        }
            
    }



}
